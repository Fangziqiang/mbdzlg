package com.jadlsoft.socket;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.core.utils.SpringBeanFactory;
import com.jadlsoft.business.dzlg.DzlgManager;
import com.jadlsoft.utils.HexUtil;
import com.jadlsoft.utils.SecretUtils;

public class DzlgMmxzManager implements Runnable {
	private static Logger logger = Logger.getLogger(DzlgMmxzManager.class);
	
	private Socket socket;
	private int delayTime = 5000;
	public final int DATATYPE_F = 2;//复式
	public final int DATATYPE_J = 8;//简式
	public DzlgMmxzManager(Socket socket) {
		this.socket = socket;
	}
	 
	public void run() {
		while (!socket.isClosed()) {
			logger.info("-------电子雷管密码下载socket服务开始!-------");
			byte[] b = null;
			byte[] res = null;
			int time = 10000;
			try {
				DzlgManager dzlgManager = (DzlgManager) SpringBeanFactory.getBean("dzlgManager");
				//定期检查一下两边的连接是不是断的
				socket.setKeepAlive(true);
				socket.setSoTimeout(delayTime);
				
				//1.读取客户端请求信息
				InputStream is = socket.getInputStream();
				int count = 0; 
				while (count == 0) {
					//返回此输入流下一个方法调用可以不受阻塞地从此输入流读取（或跳过）的估计字节数。
				   count = is.available(); 
				} 
				b = new byte[count]; 
		        int rc = 0;
		        int len = 0;
		       
	            while(rc < count){
	            	//从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。
	            	len =  is.read(b);
	            	rc += len;
	            }
	            
	            //2.数据帧解密
	           b = SecretUtils.decodeData(b);
	            
	            //3.请求电子雷管起爆密码
	            res = dzlgMmxxQq(b);
	            
	            //4.数据帧加密
	            if(b[2] == 1){
	            	res = SecretUtils.encodeData(res,DATATYPE_F);
	            }else if(b[2] == 7){
	            	res = SecretUtils.encodeData(res,DATATYPE_J);
	            }
				//5.请求结果返回客户端
	            OutputStream os = socket.getOutputStream();
	            os.write(res);
	            os.flush();
	            
	            
	            //验证不通过关闭socket连接
	            if(res.length <= 15 ){
	            	Thread.sleep(3000);//等待3秒钟，起爆器接收到数据再关闭连接
	            	//6.关闭资源
	            	os.close();
	            	is.close();
	            }
			} catch (Exception e) {
				if (socket != null) {   
                    try {   
                        socket.close();   
                    } catch (Exception e1) {   
                        socket = null;   
                        logger.info("服务器关闭socket异常！", e1);
                    }   
                }  
				logger.info("服务器run处理电子雷管密码下载异常！", e);
			} finally {
				if(res == null || res.length <= 15){
					if (socket != null) {   
	                    try {   
	                        socket.close();   
	                        logger.info("socket连接关闭");
	                    } catch (Exception e) {   
	                        socket = null;   
	                        logger.info("服务器关闭socket异常！", e);
	                    } 
					}
				}
				logger.info("-------电子雷管密码下载服务结束！-------");
			}
		}
	}
	
	
	/**
	 * 请求电子雷管起爆密码
	 * @参数：@param b
	 * @参数：@return
	 * @返回值：byte[]
	 */
	private synchronized byte[] dzlgMmxxQq(byte[] b) throws Exception{
		DzlgManager dzlgManager = (DzlgManager) SpringBeanFactory.getBean("dzlgManager");
		if(b == null || b.length <= 0){
			return null;
		}
		/**
		 * 1.解析字节数组
		 */
		Map map = parseDzlgMmxzMsg(b);
		/*Map map = new HashMap();
		map.put("qbqbh", "cs002");
		map.put("jd", 113.388);
		map.put("wd", 27.801);
		map.put("dwdm", 11);
		map.put("dataType", 1);
		List uidList = new ArrayList();
		uidList.add("6060720000104");
		map.put("uidList", uidList);*/
		/**
		 * 2.创建请求XMl文件
		 */
		String strXml = dzlgManager.createXml(map);
		/**
		 * 3.调用webservice访问网络服务平台
		 */
		logger.info("********************************");
		logger.info("Socket在线下载");
		logger.info("起爆器编号："+map.get("qbqbh"));
		logger.info("经度："+map.get("jd"));
		logger.info("纬度："+map.get("wd"));
		logger.info("单位代码："+map.get("dwdm"));
		logger.info("雷管共"+((List)map.get("uidList")).size()+"发");
		byte[] res = (byte[]) dzlgManager.getSocketReturnValue(strXml,map);
		logger.info("********************************");
		return res;
	}


	/**
	 * 1.解析字节数据获取请求的参数
	 * @参数：@param b
	 * @参数：@return
	 * @返回值：DzlgMmxzBean
	 */
	private Map parseDzlgMmxzMsg(byte[] b) {
		if(b == null || "".equals(b)){
			return null;
		}
		Map map = new HashMap();
		int dataIndex = 0;

		//1.数据头			（2字节）
		int dataTitle = HexUtil.convertBytes(b, 0, 2);
		dataIndex += 2;
		//2.数据类型			（1字节）
		int dataType= HexUtil.convertBytes(b,dataIndex, 1);
		dataIndex += 1;
		//3.数据总长度		（4字节）
		int dataLength = HexUtil.convertBytes(b, dataIndex, 4);
		dataIndex += 4;
		//4.起爆器设备编号长度	（1字节）
		int qbqsbbhLength = HexUtil.convertBytes(b, dataIndex, 1);
		dataIndex += 1;
		//5.起爆器设备编号		（qbqsbbhLength字节）
		String qbqsbbh = String.valueOf(HexUtil.convertASCBytesToString(b, dataIndex, qbqsbbhLength));
		dataIndex += qbqsbbhLength;
		//6.经度长度			（1字节）
		int jdLength = HexUtil.convertBytes(b, dataIndex, 1);
		dataIndex += 1;
		//7.经度				（jdLength字节）
		String jd = String.valueOf(HexUtil.convert4BytesToString(b, dataIndex, jdLength));
		dataIndex += jdLength;
		//8.纬度长度			（1字节）
		int wdLength = HexUtil.convertBytes(b, dataIndex, 1);
		dataIndex += 1;
		//9.纬度				（wdLength字节）
		String wd = String.valueOf(HexUtil.convert4BytesToString(b, dataIndex, wdLength));
		dataIndex += wdLength;
		//10.申请密码的雷管UID码个数		（1字节）
		int uidCount = HexUtil.convertBytes(b, dataIndex, 2);
		dataIndex += 2;
		//11.申请密码的雷管UID码内容总长度	（1字节）
		int uidListTotalLength = HexUtil.convertBytes(b, dataIndex, 2);
		dataIndex += 2;
		//12.雷管UID码数据块	（uidListTotalLength字节）
		List uidList = new ArrayList();
		for(int i = 0 ; i < uidCount ; i++){
			int uidLength = HexUtil.convertBytes(b, dataIndex, 1);
			dataIndex += 1;
			String uid = String.valueOf(HexUtil.convertASCBytesToString(b, dataIndex, uidLength));
			dataIndex += uidLength;
			uidList.add(uid);
		}
		//13.单位代码长度		（1字节）
		int dwdmLength = HexUtil.convertBytes(b, dataIndex, 1);
		dataIndex += 1;
		//14.单位代码			（dwdmLength字节）
		String dwdm = HexUtil.convertASCBytesToString(b, dataIndex, dwdmLength);
		dataIndex += dwdmLength;
		
		map.put("dataType", dataType);
		map.put("jd", jd);
		map.put("wd", wd);
		map.put("qbqbh", qbqsbbh);
		map.put("dwdm", dwdm);
		map.put("uidList", uidList);
		return map;
		
	}

}
