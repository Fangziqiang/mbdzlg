package com.jadlsoft.business.dzlg;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.xml.rpc.ParameterMode;
import javax.xml.rpc.encoding.XMLType;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.Base64;
import org.apache.log4j.Logger;
import org.apache.log4j.chainsaw.Main;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;

import com.core.business.BaseManager;
import com.core.business.zdgl.ZdglManager;
import com.core.dbutils.DicMapUtils;
import com.core.utils.SpringBeanFactory;
import com.core.utils.SysConfigUtils;
import com.jadlsoft.domain.DzlgLyffMmxzBean;
import com.jadlsoft.domain.DzlgReqBean;
import com.jadlsoft.domain.YhfwBean;
import com.jadlsoft.utils.DateUtils;
import com.jadlsoft.utils.MBDZLGConstant;
import com.jadlsoft.utils.TripleDES3_DzlgMmxz;
import com.jadlsoft.utils.TripleDES_Socket;
import com.jadlsoft.utils.jaxb.JaxbUtil;

public class DzlgManager extends BaseManager {
	private Logger logger = Logger.getLogger(DzlgManager.class);

	
	/**
	 * 根据行政区划获取网络服务平台地址
	 * @参数： @param xzqh
	 * @参数： @return   
	 * @返回值： String  
	 * @throws
	 */
	public String  getWlfwptDz(String xzqh){
		String sql =" select dz from t_dw_wlfwptdz where xzqh=:xzqh";
		Map conditions = new HashMap();
		conditions.put("xzqh", xzqh);	
		List list =  daoUtils.find(sql, conditions);
		return list.get(0).toString();
	}
	
	/**
	 * 根据起爆器编号获取作业任务
	 * @参数： @param qbqbh
	 * @参数： @return   
	 * @返回值： String  
	 * @throws
	 */
	public List getZyrwidByQbqbh(String qbqbh){
		String sql = " select * from t_dzlg_qbqssrw where qbqbh=:qbqbh ";
		Map conditions = new HashMap();
		conditions.put("qbqbh", qbqbh);
		List list = daoUtils.find(sql, conditions);
		return list;
	}
	
	/**
	 * 根据作业任务ID、起爆器编号获取作业任务
	 * @参数： @param qbqbh
	 * @参数： @return   
	 * @返回值： String  
	 * @throws
	 */
	public Map getZyrwid(Map map){
		String sql1 = " select * from t_dzlg_qbqssrw where   zyrwid=:zyrwid and xzqh is not null";
		String sql2 = " select * from t_dzlg_qbqssrw where qbqbh = :qbqbh ";
		String sql3 = " select * from t_dzlg_qbqssrw where qbqbh = :qbqbh and  zyrwid=:zyrwid ";
		Map conditions = new HashMap();
		List list = new ArrayList();
		String cwxx= "";
		if(map.get("xmbh") != null && !"".equals(map.get("xmbh"))){
			conditions.put("zyrwid", map.get("xmbh"));
		}else if(map.get("htid") != null && !"".equals(map.get("htid"))){
			conditions.put("zyrwid", map.get("htid"));
		}

		if(map.get("qbqbh") == null || "".equals(map.get("qbqbh"))){
			list = daoUtils.find(sql1, conditions);
			if(list.size() == 0){
				cwxx= MBDZLGConstant.FH_XX_1;
			}
		}else{
			conditions.put("qbqbh", map.get("qbqbh"));
			if(conditions.get("zyrwid") == null || "".equals(conditions.get("zyrwid"))){
				list = daoUtils.find(sql2, conditions);
				if(list.size() == 0){
					cwxx= MBDZLGConstant.FH_XX_2;
				}
			}else{
				list = daoUtils.find(sql3, conditions);
				if(list.size() == 0){
					cwxx= MBDZLGConstant.FH_XX_3;
				}
			}
		}

		Map returnMap = new HashMap();
		returnMap.put("list", list);
		returnMap.put("cwxx", cwxx);
		logger.info("=========作业信息长度："+list.size()+"  xmbh："+map.get("xmbh")+"  htid："+map.get("htid")+"=========");
		return returnMap;
	}
	
	
	/**
	 * webservice 调用网络服务平台socket通信
	 * @参数： @param strXml
	 * @参数： @return   
	 * @返回值： byte[]  
	 * @throws
	 */
	public byte[] getSocketReturnValue(String strXml,Map map) {
		try {
			DzlgManager dzlgManager = (DzlgManager) SpringBeanFactory.getBean("dzlgManager");
			List list = new ArrayList();
			if(map.get("qbqbh") != null && !"".equals(map.get("qbqbh"))){
				list = dzlgManager.getZyrwidByQbqbh(map.get("qbqbh").toString());
				//起爆器未备案
				if(list == null || list.size() <= 0 ){
					byte[] res2 = new byte[]{2};
					byte[] tempRes2;
					try {
						if("17".equals(map.get("dataType")+"")){
							map.put("fh", "2");
							//保存用户访问信息
							return TripleDES_Socket.des3EncodeECB(new byte[]{1,2});
						}else{
							map.put("fh", "1");
							//保存用户访问信息
							return TripleDES_Socket.des3EncodeECB(new byte[]{1,1});
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}else{
				Map returnMap= dzlgManager.getZyrwid(map);
				if(returnMap.get("list") == null || ((List)returnMap.get("list")).size() <= 0 ){
					byte[] res2 = new byte[]{2};
					byte[] tempRes2;
					try {
						if("17".equals(map.get("dataType")+"")){
							map.put("fh", "2");
							//保存用户访问信息
							return TripleDES_Socket.des3EncodeECB(new byte[]{1,2});
						}else{
							map.put("fh", "1");
							//保存用户访问信息
							return TripleDES_Socket.des3EncodeECB(new byte[]{1,1});
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			//List wlfwptdzList = (List) (DicCache.getInstance().getCache().get("t_dw_wlfwptdz"));
			List wlfwptdzList = (List) DicMapUtils.getDicMapCache().get("t_dw_wlfwptdz");
			String xzqh = "";
			for (int i = 0; i < list.size(); i++) {
				Map tempMap = (Map) list.get(0);
				if(tempMap.get("xzqh") != null && !"".equals(tempMap.get("xzqh"))){
					xzqh = tempMap.get("xzqh").toString().substring(0, 2)+"0000";
					map.put("xzqh", xzqh);
				}
			}
			String url = "";
			String sfmc = "";
			for (int i = 0; i < wlfwptdzList.size(); i++) {
				Map dzMap = (Map) wlfwptdzList.get(i);
				if(xzqh.equals(dzMap.get("xzqh"))){
					url = dzMap.get("dz").toString();
					sfmc = dzMap.get("sfmc").toString();
				}
			}
			url = SysConfigUtils.getProperty("mbxtwlfwpt_url");
			StringBuffer dz = new StringBuffer();
			dz.append(url).append("/services/dzlgService?wsdl");
			logger.info("调用"+sfmc+"网络服务平台地址："+url);
			Service  service = new Service();
			Call call = null;
			call = (Call) service.createCall();
			call.setTargetEndpointAddress(dz.toString());
			call.setTimeout(new Integer(180 * 1000));// 超时设定30秒抛出异常
			call.setOperationName("socketTx");// 调用方法
			call.addParameter("jsonTx", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			call.addParameter("dataType", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			call.setReturnType(org.apache.axis.Constants.SOAP_VECTOR);// 指定返回类型
			Vector vec =  (Vector)call.invoke(new Object[]{strXml,map.get("dataType")+""});// 调用服务并返回存在的对应数据
			byte[] res = new byte[vec.size()];
			for (int i = 0; i < vec.size(); i++) {
				res[i] = (Byte)vec.get(i);
			}
			//对返回的数据解密
			byte[] re = TripleDES_Socket.des3DecodeECB(res);
			//判断下载是否成功  成功返回的是一些详细的信息
			if(re != null && re.length>10){
				map.put("fh", "0");
			}else{
				//取返回的最后一个
				map.put("fh", re[re.length-1]);
			}
			//保存用户访问信息
			return res;
		} catch (Exception e) {
			e.printStackTrace();
//			if("17".equals(map.get("dataType")+"")){
//				return new byte[]{2};
//			}else{
//				//return new byte[]{(byte) 0x87,0x6a,(byte) 0xa7,(byte) 0xc6,0x57,0x1e,(byte) 0xbf,(byte) 0xb5};
//				try {
//					return SecretUtils.des3EncodeECB(new byte[]{1,99});
//					
//				} catch (Exception e1) {
//					e1.printStackTrace();
//					//非法的申请信息 [1,1] 加密后 [-121, 106, -89, -58, 87, 30, -65, -75]
//					return new byte[]{(byte) 0x87,0x6a,(byte) 0xa7,(byte) 0xc6,0x57,0x1e,(byte) 0xbf,(byte) 0xb5};
//				}
//			}
			//bbdzlgtxzx 与 wlfwpt 网络连接失败
			map.put("fh", "99+");
			//保存用户访问信息
			//网络连接失败
			return new byte[]{68, -10, 9, -34, -36, -25, 100, 98};
		}
	}

	

	/**
	 * 创建请求XMl数据
	 * @参数： @param map
	 * @参数： @return   
	 * @返回值： String  
	 * @throws
	 */
	public String createXml(Map map) {
		Document document = DocumentHelper.createDocument();
		document.setXMLEncoding("utf-8");
		Element sq = document.addElement("sq");
		Element qbqbhElement = sq.addElement("qbqbh");
		qbqbhElement.setText(map.get("qbqbh") == null ? "":map.get("qbqbh").toString());
		Element jdElement = sq.addElement("jd");
		jdElement.setText(map.get("jd") == null ? "":map.get("jd").toString());
		Element wdElement = sq.addElement("wd");
		wdElement.setText(map.get("wd") == null ? "":map.get("wd").toString());
		Element bpsjElement = sq.addElement("bpsj");
		bpsjElement.setText(map.get("bpsj") == null ? "":map.get("bpsj").toString());
		Element bprysfzElement = sq.addElement("bprysfz");
		bprysfzElement.setText(map.get("bprysfz") == null ? "" : map.get("bprysfz").toString());
		Element dwdmElement = sq.addElement("dwdm");
		dwdmElement.setText(map.get("dwdm") == null ? "":map.get("dwdm").toString());
		Element htidElement = sq.addElement("htid");
		htidElement.setText(map.get("htid") == null ? "":map.get("htid").toString());
		Element xmbhElement = sq.addElement("xmbh");
		xmbhElement.setText(map.get("xmbh") == null ? "":map.get("xmbh").toString());
		Element fbhElement = sq.addElement("fbh");
		fbhElement.setText(map.get("fbh") == null ? "":map.get("fbh").toString());
		Element htmElement = sq.addElement("htm");
		htmElement.setText(map.get("htm") == null ? "":map.get("htm").toString());
		Element xtmElement = sq.addElement("xtm");
		xtmElement.setText(map.get("xtm") == null ? "":map.get("xtm").toString());
		Element uids = sq.addElement("uids");
		List uidList = (List) map.get("uidList");
		if(uidList != null && uidList.size() > 0){
			for (int i = 0; i < uidList.size(); i++) {
				Element uidElement  = uids.addElement("uid");	
				uidElement.setText(uidList.get(i).toString());
			}
		}
		 OutputFormat format = OutputFormat.createPrettyPrint();
		 format.setEncoding("utf-8");
         StringWriter sw = new StringWriter(); 
         XMLWriter xw = new XMLWriter(sw, format); 
         try { 
			xw.write(document); 
			xw.flush(); 
			xw.close(); 
         } catch (IOException e) { 
                 logger.error("格式化XML文档发生异常，请检查！", e); 
         } 
         return sw.toString(); 
	}

	/**
	 * webservice  调用网络服务平台获取json数据
	 * @参数： @param map
	 * @参数： @return   
	 * @返回值： char[]  
	 * @throws
	 */
	public String getJsonReturnValue(String strXml,Map map) {
		try {
			DzlgManager dzlgManager = (DzlgManager) SpringBeanFactory.getBean("dzlgManager");
			Map returnMap = dzlgManager.getZyrwid(map);
			if(((List)returnMap.get("list")).size() == 0 ){
				if(map.get("dataType").equals("sysb")){
					map.put("fh", "fail");
					//保存用户访问信息
					return "{'success':'fail'}";
				}else{
					map.put("fh", returnMap.get("cwxx").toString());
					//保存用户访问信息
					return "{'cwxx':"+returnMap.get("cwxx")+"}";
				}
			}
			//获取网络服务平台地址
			List wlfwptdzList = (List) DicMapUtils.getDicMapCache().get("t_dw_wlfwptdz");
			String xzqh = "";
			for (int i = 0; i < ((List)returnMap.get("list")).size(); i++) {
				Map tempMap = (Map) ((List)returnMap.get("list")).get(0);
				if(tempMap.get("xzqh") != null && !"".equals(tempMap.get("xzqh"))){
					xzqh = tempMap.get("xzqh").toString().substring(0, 2)+"0000";
				}
			}
			String url = "";
			String sfmc = "";
			for (int i = 0; i < wlfwptdzList.size(); i++) {
				Map dzMap = (Map) wlfwptdzList.get(i);
				if(xzqh.equals(dzMap.get("xzqh"))){
					url = dzMap.get("dz").toString();
					sfmc = dzMap.get("sfmc").toString();
					map.put("xzqh", xzqh);
					map.put("sfmc", sfmc);
				}
			}
			url = SysConfigUtils.getProperty("mbxtwlfwpt_url");
			StringBuffer dz = new StringBuffer();
			dz.append(url).append("/services/dzlgService?wsdl");
			logger.info("调用"+sfmc+"网络服务平台地址："+url);
			Service  service = new Service();
			Call call = null;
			call = (Call) service.createCall();
			call.setTargetEndpointAddress(dz.toString());
			call.setTimeout(new Integer(180 * 1000));// 超时设定30秒抛出异常
			call.setOperationName("jsonTx");// 调用方法
			call.addParameter("strXml", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			call.addParameter("dataType", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			call.setReturnType(XMLType.XSD_STRING);// 指定返回类型
			String str =  (String)call.invoke(new Object[]{strXml,(String)(map.get("dataType"))});// 调用服务并返回存在的对应数据
			
			//str = Base64.encode(TripleDES3_DzlgFhcgsj.encode(str));
			//判断是否下载成功    下载成功后返回过来的是加密的一些详细的信息
			if(str != null && !"".equals(str) && str.length()>20){
				//System.out.println("网络服务平台返回数据："+TripleDES3_DzlgFhcgsj.decode(Base64.decode(str)));
				logger.info("网络服务平台返回数据："+str);
				map.put("fhxxxx", str);
				map.put("fh", "0");
			}else{
				//{'cwxx':'0'}
				map.put("fh", str.split("\"")[3].toString());
			}
			//保存用户访问信息
			return str;
		} catch (Exception e) {
			e.printStackTrace();
			if(map.get("dataType").equals("sysb")){
				map.put("fh", "fail");
				//保存用户访问信息
				//yhfwAdd.addYhfwData(map);
				return "{'success':'fail'}";
			}else{
				map.put("fh", "99_1");
				//保存用户访问信息
				//yhfwAdd.addYhfwData(map);
				//return "{'cwxx':'99'}";
				return '{'+"\"cwxx\":"+"\"99\""+'}';
			}
		}
	}
	
	/**
	 * 设置作业任务
	 * @参数： @param insertList
	 * @参数： @param list   
	 * @返回值： void  
	 * @throws
	 */
	public void szZyrw(List zyrwList,List list) {
		Map map = new HashMap();
		List tempList = null;
		String insert_sql = " insert into t_dzlg_qbqssrw (id,qbqbh,zyrwid,xzqh) values (Q_DZLG_QBQSSRW.nextval,:qbqbh,:zyrwid,:xzqh)";
		String update_sql = " update t_dzlg_qbqssrw set xzqh = :xzqh where qbqbh=:qbqbh and zyrwid=:zyrwid ";
		String[] insert_fields = {"qbqbh","zyrwid","xzqh"};
		String[] update_fields = {"xzqh","qbqbh","zyrwid"};
		List insert_list = new ArrayList();
		List update_list = new ArrayList();
		for (int i = 0; i < zyrwList.size(); i++) {
			map = (Map) zyrwList.get(i);
			tempList = this.getZyrwByQbqAndZyrwid(map.get("qbqbh").toString(),map.get("zyrwid").toString());
			if(tempList != null && tempList.size() > 0){
				update_list.add(map);
			}else{
				insert_list.add(map);
			}
		}
		if(insert_list.size() > 0){
			int[] count1 = daoUtils.executeBatchUpdate(insert_sql, insert_fields, insert_list);
			Map update_map = new HashMap() ;
			Map condition = null;
			for (int i = 0; i < count1.length; i++) {
				condition = new HashMap();
				update_map = (Map) insert_list.get(i);
				condition.put("id", update_map.get("id"));
				condition.put("status", count1[i]);
				list.add(condition);
			}
		}
		if( update_list.size() > 0){
			int[] count2 = daoUtils.executeBatchUpdate(update_sql, update_fields, update_list);
			Map update_map = new HashMap() ;
			Map condition = null;
			for (int i = 0; i < count2.length; i++) {
				condition = new HashMap();
				update_map = (Map) update_list.get(i);
				condition.put("id", update_map.get("id"));
				condition.put("status", count2[i]);
				list.add(condition);
			}
		}
		
	}

	/**
	 * 变更作业任务
	 * @参数： @param updateList
	 * @参数： @param list   
	 * @返回值： void  
	 * @throws
	 */
	public void bgZyrw(List zyrwList,List list) {
		Map map = null;
		List tempList = new ArrayList();
		String insert_sql = " insert into t_dzlg_qbqssrw (id,qbqbh,zyrwid,xzqh) values (Q_DZLG_QBQSSRW.nextval,:qbqbh,:zyrwid,:xzqh)";
		String update_sql = " update t_dzlg_qbqssrw set xzqh = :xzqh where qbqbh=:qbqbh and zyrwid=:zyrwid ";
		String sql = " update t_dzlg_qbqssrw set qbqbh = '',xzqh='' where qbqbh=:qbqbh";
		String[] insert_fields = {"qbqbh","zyrwid","xzqh"};
		String[] update_fields = {"xzqh","qbqbh","zyrwid"};
		String[] fields = {"qbqbh"};
		List insert_list = new ArrayList();
		List update_list = new ArrayList();
		for (int i = 0; i < zyrwList.size(); i++) {
			map = (Map) zyrwList.get(i);
			tempList = this.getZyrwByQbqAndZyrwid(map.get("qbqbh").toString(),map.get("zyrwid").toString());
			if(tempList != null && tempList.size() > 0){
				update_list.add(map);
			}else{
				insert_list.add(map);
			}
		}
		/**
		 * 更新起爆器编号为空
		 */
		daoUtils.executeBatchUpdate(sql, fields, zyrwList);
		if(insert_list.size() > 0){
			int[] count1 = daoUtils.executeBatchUpdate(insert_sql, insert_fields, insert_list);
			Map insert_map = new HashMap() ;
			Map condition = null;
			for (int i = 0; i < count1.length; i++) {
				insert_map = (Map) insert_list.get(i);
				condition = new HashMap();
				condition.put("id", insert_map.get("id"));
				condition.put("status", count1[i]);
				list.add(condition);
			}
		}
		if( update_list.size() > 0){
			int[] count2 = daoUtils.executeBatchUpdate(update_sql, update_fields, update_list);
			Map update_map = new HashMap() ;
			Map condition = null;
			for (int i = 0; i < count2.length; i++) {
				update_map = (Map) update_list.get(i);
				condition = new HashMap();
				condition.put("id", update_map.get("id"));
				condition.put("status", count2[i]);
				list.add(condition);
			}
		}
	}

	/**
	 * 取消作业任务
	 * @参数： @param delList
	 * @参数： @param list   
	 * @返回值： void  
	 * @throws
	 */
	public void qxZyrw(List zyrwList,List list) {
		String sql = " update t_dzlg_qbqssrw set qbqbh = '',xzqh='' where qbqbh=:qbqbh and zyrwid=:zyrwid ";
		String[] fields = {"qbqbh","zyrwid"};
		int[] count = daoUtils.executeBatchUpdate(sql, fields, zyrwList);
		Map map = new HashMap() ;
		Map condition = null;
		for (int i = 0; i < count.length; i++) {
			map = (Map) zyrwList.get(i);
			condition = new HashMap();
			condition.put("id", map.get("id"));
			condition.put("status", count[i]);
			list.add(condition);
		}
	}
	
	/**
	 * 根据起爆器编号，作业任务ID 查询作业任务
	 * @参数： @param qbqbh
	 * @参数： @param zyrwid
	 * @参数： @return   
	 * @返回值： List  
	 * @throws
	 */
	public List getZyrwByQbqAndZyrwid(String qbqbh, String zyrwid) {
		String sql =" select * from t_dzlg_qbqssrw where qbqbh=:qbqbh and zyrwid=:zyrwid ";
		Map conditions = new HashMap();
		conditions.put("qbqbh", qbqbh);
		conditions.put("zyrwid", zyrwid);
		return daoUtils.find(sql, conditions);
	}
	
	/**
	 * 获取起爆器作业任务List
	 * @参数： @param qbqbh
	 * @参数： @return   
	 * @返回值： List  
	 * @throws
	 */
	public List getQbqbhList(String qbqbh) {
		String sql =" select * from t_dzlg_qbqssrw where qbqbh=:qbqbh";
		Map conditions = new HashMap();
		conditions.put("qbqbh", qbqbh);
		return daoUtils.find(sql, conditions);
	}

	
	/**
	 * 根据起爆器和作业任务获取行政区划
	 * @param dwdm
	 * @param htid
	 * @param xmbh
	 * @param qbqbh
	 * @return
	 * @author wujiaxu
	 * @Time 2017-7-6 下午4:22:49
	 */
	public Map getXzqhByQbqAndZyrw(String dwdm, String htid, String xmbh,
			String qbqbh,int dataType) {
		Map map = new HashMap();
		StringBuffer sql = new StringBuffer();
		sql.append(" select * from t_dzlg_qbqssrw where 1=1 ");
		
		//1、组装起爆器编号
		if(qbqbh != null && !"".equals(qbqbh)){
			sql.append(" and qbqbh = '"+qbqbh+"' ");
		}
		
		
		//2、组装作业任务
		if(xmbh != null && !"".equals(xmbh)){
			sql.append(" and zyrwid = '"+xmbh+"' ");
		}else if(htid != null && !"".equals(htid)){
			sql.append(" and zyrwid = '"+htid+"' ");
		}else if(dwdm != null && !"".equals(dwdm)){
			sql.append(" and zyrwid = '"+dwdm+"' ");
		}
		//3、查询
		List list = daoUtils.find(sql.toString(), new HashMap());
		//有起爆器，只能设置一个作业任务
		if(qbqbh != null && !"".equals(qbqbh)){
			if(list != null && list.size() == 1){
				//return (String) ((Map)list.get(0)).get("xzqh");
				map.put("xzqh", ((Map)list.get(0)).get("xzqh"));
				return map;
			}
		}else{
			if(list != null && list.size() > 0){
				for(int i = 0; i < list.size(); i++){
					Map xzqhMap = (Map) list.get(i);
					if(xzqhMap.get("xzqh") != null && !"".equals(xzqhMap.get("xzqh"))){
						map.put("xzqh", xzqhMap.get("xzqh"));
						return map;
					}
				}
			}
		}
		
		//4、查询不到作业任务，判断是 起爆器未备案 \未设置作业任务 错误,离线下载不需要传起爆器
		if(qbqbh != null && !"".equals(qbqbh)){
			String qbqSql = "select * from t_dzlg_qbqssrw where qbqbh = " + qbqbh;
			List qbqList = daoUtils.find(sql.toString(), new HashMap());
			map.put("cwxx", MBDZLGConstant.ERROR_QBQ_WBA);
		}else{
			map.put("cwxx", MBDZLGConstant.ERROR_QBQ_WSSRW);
		}
		return map;
	}

	/**
	 * 向网络服务平台发起请求
	 * @param dzlgxxBean
	 * @return
	 * @author wujiaxu
	 * @throws Exception 
	 * @Time 2017-7-7 下午1:40:41
	 */
	public Object reqToWlfwpt(DzlgReqBean dzlgxxBean) throws Exception {
		/**
		 * 1、验证完整性
		 */
		if( dzlgxxBean.getQbqbh() == null && dzlgxxBean.getDwdm() == null &&  dzlgxxBean.getHtid() == null && dzlgxxBean.getXmbh() == null){
			logger.info("起爆器编号、作业任务必须有一个！");
			dzlgxxBean.setError(MBDZLGConstant.ERROR_REQ);
			//http访问
			if(MBDZLGConstant.JKLX_HTTP.equals(dzlgxxBean.getJklx())  ){
				return  dzlgxxBean.getHttpReturnError();
			}
			//socket 访问
			return dzlgxxBean.getSocketReturnError();
		}
		
		/**
		 * 2、获取网络服务平台调用地址
		 */
		//2.1、获取行政区划
		Map map= this.getXzqhByQbqAndZyrw(dzlgxxBean.getDwdm(),dzlgxxBean.getHtid(),dzlgxxBean.getXmbh(),dzlgxxBean.getQbqbh(),dzlgxxBean.getDataType());
		String xzqh = (String) map.get("xzqh");
		if(map.get("xzqh") == null || "".equals(map.get("xzqh"))){
			logger.info(map.get("cwxx"));
			dzlgxxBean.setError(Integer.parseInt(map.get("cwxx")+""));
			//http访问
			if(MBDZLGConstant.JKLX_HTTP.equals(dzlgxxBean.getJklx())  ){
				return  dzlgxxBean.getHttpReturnError();
			}
			//socket 访问
			return dzlgxxBean.getSocketReturnError();	
			
		}
		
		//2.2、获取网络服务平台IP地址
		String webappArr = this.getWlfwptdz(xzqh);
		if(webappArr == null || "".equals(webappArr)){
			logger.info("未找到行政区划【"+xzqh+"】对应的网络服务平台地址!");
			dzlgxxBean.setError(MBDZLGConstant.ERROR_REQ);
			//http访问
			if(MBDZLGConstant.JKLX_HTTP.equals(dzlgxxBean.getJklx())  ){
				return  dzlgxxBean.getHttpReturnError();
			}
			//socket 访问
			return dzlgxxBean.getSocketReturnError();
		}
		
		//2.3获取调用的url
		StringBuffer dz = new StringBuffer();
		webappArr = SysConfigUtils.getProperty("mbxtwlfwpt_url");
		dz.append(webappArr).append("/services/dzlgService?wsdl");
		logger.info("调用【"+xzqh+"】网络服务平台地址："+dz.toString());
		
		/**
		 * 3、调用网络服务平台
		 */
		return this.toWlfwpt(dz.toString(),dzlgxxBean);
		
	}


	/**
	 * 获取网络服务平台地址
	 * @param xzqh
	 * @return
	 * @author wujiaxu
	 * @Time 2017-7-8 上午11:03:39
	 */
	private String getWlfwptdz(String xzqh) {
		Map wlfwptdzMap = ZdglManager.getDm("t_dw_wlfwptdz");
		xzqh = xzqh.substring(0, 2)+"0000";
		String url  = ((Map) wlfwptdzMap.get(xzqh)).get("dz").toString();
		String xzqhmc = ((Map) wlfwptdzMap.get(xzqh)).get("sfmc").toString();
		return url;
	}

	/**
	 * socket方式请求网络服务平台
	 * @param url
	 * @param dzlgxxBean
	 * @return
	 * @author wujiaxu
	 * @throws Exception 
	 * @Time 2017-7-7 下午2:41:36
	 */
	private Object toWlfwpt(String url, DzlgReqBean dzlgxxBean) throws Exception {
		byte[] res = null;
		String str = null;
		try {
			Service  service = new Service();
			Call call = null;
			call = (Call) service.createCall();
			call.setTargetEndpointAddress(url);
			call.setTimeout(new Integer(180 * 1000));// 超时设定30秒抛出异常
			call.setOperationName("dzlgReq");// 调用方法
			call.addParameter("dzlgxx", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			
			if(MBDZLGConstant.JKLX_HTTP.equals(dzlgxxBean.getJklx())){
				call.setReturnType(XMLType.XSD_STRING);// 指定返回类型
				str =  (String)call.invoke(new Object[]{JaxbUtil.convertToXml(dzlgxxBean).toString()});// 调用服务并返回存在的对应数据
				return str;
			}else{
				call.setReturnType(org.apache.axis.Constants.SOAP_VECTOR);// 指定返回类型
				Vector vec =  (Vector)call.invoke(new Object[]{JaxbUtil.convertToXml(dzlgxxBean).toString()});// 调用服务并返回存在的对应数据
				res = new byte[vec.size()];
				for (int i = 0; i < vec.size(); i++) {
					res[i] = (Byte)vec.get(i);
				}	
				return res;
			}
			
		} catch (Exception e) {
			logger.error("请求网络服务平台出错！", e);
			dzlgxxBean.setError(MBDZLGConstant.ERROR_CONNECT);
			//http访问
			if(MBDZLGConstant.JKLX_HTTP.equals(dzlgxxBean.getJklx())  ){
				return  dzlgxxBean.getHttpReturnError();
			}
			//socket 访问
			return dzlgxxBean.getSocketReturnError();
		}
		
	}
	public void getDzlgReqBean(){
		
	}
	/**
	 * 领用发放根据序列号和密钥下载密码
	 * @Title:
	 * @author fandengyong
	 * @参数: @param dzlgLyffMmxz
	 * @参数: @return
	 * @date 2017-7-27 上午8:55:31
	 */
	public String lyffToWlfwpt(DzlgLyffMmxzBean lyffMmxz) {
		/**
		 * 1、验证数据
		 */
		if(lyffMmxz.getXlh() == null || "".equals(lyffMmxz.getXlh()) || lyffMmxz.getMy() == null || 
				"".equals(lyffMmxz.getMy())){
			return MBDZLGConstant.ERROR_LYFF_BWZ;
		}
		/**
		 * 根据序列号获取网络服务平台信息
		 */
		Map map = this.getXzqhToXlh(lyffMmxz.getXlh());
		if(map == null || map.size() == 0){
			return MBDZLGConstant.ERROR_LYFF_XLHCW;
		}
		String wlffptdArr = (String) map.get("dz");
		if(wlffptdArr == null || "".equals(wlffptdArr)){
			logger.info("未找到行政区划【"+map.get("xzqh")+"】对应的网络服务平台地址!");
			return MBDZLGConstant.ERROR_LYFF_XLHCW;
		}
		StringBuffer dz = new StringBuffer();
		wlffptdArr = SysConfigUtils.getProperty("mbxtwlfwpt_url");
		dz.append(wlffptdArr).append("/services/dzlgService?wsdl");
		logger.info("调用【"+map.get("sfmc")+"】网络服务平台地址："+dz.toString());
		return this.toLyffWlfwpt(dz.toString(), lyffMmxz);
	}
	/**
	 * 领用发放访问网络服务平台
	 * @Title:
	 * @author fandengyong
	 * @参数: @param dz
	 * @参数: @param xlh
	 * @参数: @param my
	 * @参数: @return
	 * @date 2017-7-27 上午9:27:56
	 */
	private String toLyffWlfwpt(String url, DzlgLyffMmxzBean lyffMmxzBean) {
		String str = null;
		try {
			Service  service = new Service();
			Call call = null;
			call = (Call) service.createCall();
			call.setTargetEndpointAddress(url);
			call.setTimeout(new Integer(180 * 1000));// 超时设定30秒抛出异常
			call.setOperationName("dzlgLyffReq");// 调用方法
			call.addParameter("dzlglyffxx", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
			
			call.setReturnType(XMLType.XSD_STRING);// 指定返回类型
			str =  (String)call.invoke(new Object[]{JaxbUtil.convertToXml(lyffMmxzBean).toString()});// 调用服务并返回存在的对应数据
			return str;
			
		} catch (Exception e) {
			logger.error("请求网络服务平台出错！", e);
			return MBDZLGConstant.ERROR_LYFF_WLLJSB;
		}
	}

	/**
	 * 根据序列号获网络服务平台信息
	 * @Title:
	 * @author fandengyong
	 * @参数: @param xlh
	 * @参数: @return
	 * @date 2017-7-27 上午9:07:06
	 */
	private Map getXzqhToXlh(String xlh) {
		//序列号组成 ： 13位单位代码  + xzqh前两位 + 4位随机数 
		String xzqh = xlh.substring(0, 2);
		String sql = "select * from t_dw_wlfwptdz where xzqh like '"+xzqh+"%'";
		List list = daoUtils.find(sql, new HashMap());
		if(list != null && list.size() == 1){
			return (Map) list.get(0);
		}
		return  null;
	}
	
}
