package com.jadlsoft.business.dzlg;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.xml.rpc.ParameterMode;
import javax.xml.rpc.encoding.XMLType;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.log4j.Logger;

import com.core.business.BaseManager;
import com.core.dbutils.DicMapUtils;
import com.core.utils.SysConfigUtils;
import com.jadlsoft.domain.DzlgxxBean;
import com.jadlsoft.utils.DzlgMbconstant;
import com.jadlsoft.utils.JaxbUtil;
import com.jadlsoft.utils.SecretUtils;
import com.jadlsoft.utils.TripleDES_Socket;

public class DzlgSocketManager extends BaseManager {
	private static Logger logger = Logger.getLogger(DzlgSocketManager.class);
	
	private DzlgManager dzlgManager;
	
	private DzlgxxBean dzlgxxBean;
	
	/**
	 * 密码申请【在线】
	 * @param b 接受到的客户端信息
	 * @return
	 * @throws Exception
	 * @author wujiaxu
	 * @Time 2017-7-4 下午1:59:32
	 */
	public byte[] mmxz_zx(byte[] b) throws Exception{
		/**
		 * 1、数据解析
		 */
		this.changeToBean(b);
	    
		/**
		 * 2、向网络服务平台请求密码
		 */
        byte[] res = (byte[])this.getSocketReturnValue();
       
        /**
         * 3、组装数据头返回
         */
		return SecretUtils.encodeData(res,this.getReturnType());
	}
	
	
	/**
	 * 字节数组解析并转成bean 
	 * @param b
	 * @author wujiaxu
	 * @throws Exception 
	 * @Time 2017-7-6 下午3:58:31
	 */
	private void changeToBean(byte[] b) throws Exception {
		//1.1、解密字节数组
        b = SecretUtils.decodeData(b);
        //1.2、转换电子雷管bean
        dzlgxxBean = DzlgParseUtil.parseMmxzOnline(b);
        //1.3、输入请求日志
        dzlgxxBean.showLog(DzlgMbconstant.QQLX_MMZXXZ);
	}


	/**
	 * 获取返回的数据类型
	 * @return
	 * @author wujiaxu
	 * @Time 2017-7-6 下午3:55:39
	 */
	private int getReturnType() {
		int dateType = (Integer) DzlgMbconstant.DATATYPE_RETURN.get(dzlgxxBean.getDataType());
		return dateType;
	}


	/**
	 * 
	 * 请求网络服务平台
	 * @author wujiaxu
	 * @throws Exception 
	 * @Time 2017-7-6 上午9:45:31
	 */
	private byte[] getSocketReturnValue() throws Exception {
		/**
		 * 1、校验非法请求【起爆器编号和作业任务必须有一个】
		 * 	
		 *  【雷管信息必须存在】
		 */
		if(dzlgxxBean == null 
				|| (dzlgxxBean.getQbqbh() == null && dzlgxxBean.getDwdm() == null &&  dzlgxxBean.getHtid() == null && dzlgxxBean.getXmbh() == null)){
			logger.info("起爆器编号和作业任务必须有一个！");
			return encodeMsg(DzlgMbconstant.ERROR_REQ);
		}
		
		
		/**
		 * 2、获取网络服务平台地址
		 */
		
		//2.1根据起爆器和作业任务获取作业地行政区划
		String xzqh= dzlgManager.getXzqhByQbqAndZyrw(dzlgxxBean.getDwdm(),dzlgxxBean.getHtid(),dzlgxxBean.getXmbh(),dzlgxxBean.getQbqbh());
		if(xzqh == null || "".equals(xzqh)){
			logger.info("未能找到请求的网络服务平台地址！");
			return encodeMsg(DzlgMbconstant.ERROR_REQ);
		}
		
		//2.2根据行政区划获取网络服务平台地址
		Map wlfwptdzMap = (Map) DicMapUtils.getDicMapCacheForTranslate().get("t_dw_wlfwptdz");
		xzqh = xzqh.substring(0, 2)+"0000";
		String url  = ((Map) wlfwptdzMap.get(xzqh)).get("dz").toString();
		String xzqhmc = ((Map) wlfwptdzMap.get(xzqh)).get("sfmc").toString();
		
		if(url == null || "".equals(url)){
			logger.info("未能找到["+xzqh+"]对应的地址！");
			return encodeMsg(DzlgMbconstant.ERROR_REQ);
		}
		
		//2.3组装实际访问地址
		StringBuffer dz = new StringBuffer();
		url = SysConfigUtils.getProperty("mbxtwlfwpt_url");
		dz.append(url).append("/services/dzlgService?wsdl");
		logger.info("调用"+xzqhmc+"网络服务平台地址："+url);
		
		/**
		 * 3、调用网络服务平台
		 */
		try {
			byte[] re = this.toWlfwpt(dz.toString());
			return this.encodeMsg(re);
		} catch (Exception e) {
			logger.error("请求网络服务平台出错", e);
			//网络连接失败
			return encodeMsg(DzlgMbconstant.ERROR_CONNECT);
		}
		
	}

	/**
	 * 调用网络服务平台
	 * @param url
	 * @author wujiaxu
	 * @return 
	 * @throws RemoteException 
	 * @throws Exception 
	 * @Time 2017-7-6 下午4:59:00
	 */
	private byte[] toWlfwpt(String url) throws Exception {
	
		Service  service = new Service();
		Call call = null;
		call = (Call) service.createCall();
		call.setTargetEndpointAddress(url);
		call.setTimeout(new Integer(180 * 1000));// 超时设定30秒抛出异常
		call.setOperationName("socketTx");// 调用方法
		call.addParameter("jsonTx", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
		call.addParameter("dataType", XMLType.XSD_STRING, ParameterMode.IN);// 增加参数
		call.setReturnType(org.apache.axis.Constants.SOAP_VECTOR);// 指定返回类型
		Vector vec =  (Vector)call.invoke(new Object[]{JaxbUtil.convertToXml(dzlgxxBean).toString(),dzlgxxBean.getDataType()+""});// 调用服务并返回存在的对应数据
		byte[] res = new byte[vec.size()];
		for (int i = 0; i < vec.size(); i++) {
			res[i] = (Byte)vec.get(i);
		}	
		return res;
	}


	/**
	 * 加密返回信息
	 * @param errorReq
	 * @return
	 * @author wujiaxu
	 * @throws Exception 
	 * @Time 2017-7-6 下午4:07:54
	 */
	private byte[] encodeMsg(byte[] errorReq) throws Exception {
		return TripleDES_Socket.des3EncodeECB(errorReq);
	}



	public static void main(String[] args) {
		DzlgxxBean dzlgxxBean = new DzlgxxBean();
		dzlgxxBean.setQbqbh("qbqbh");

		List list = new ArrayList();
		list.add("111");
		list.add("222");
		dzlgxxBean.setUidList(list);

		String str = JaxbUtil.convertToXml(dzlgxxBean);
		System.out.println(str);
		dzlgxxBean.showLog(DzlgMbconstant.QQLX_MMZXXZ);
	}



	
	public DzlgManager getDzlgManager() {
		return dzlgManager;
	}
	
	public void setDzlgManager(DzlgManager dzlgManager) {
		this.dzlgManager = dzlgManager;
	}



}
